#
# https://gitlab.com/gitlab-org/gitlab/-/tree/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml
#
image: python:3.10

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
cache:
  paths:
    - .cache/pip

# prevent duplicate runs for MR and branch pipelines
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

before_script:
  # Print out python version for debugging
  - python -V
  - python3 -m pip install virtualenv
  - python3 -m pip install --upgrade pip wheel
  - virtualenv venv
  - source venv/bin/activate
  - python3 -m pip install .[test]

test:
  stage: build
  rules:
    - if: "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  script:
    - pytest -v --junit-xml report.xml
  artifacts:
    reports:
      junit: ${CI_PROJECT_DIR}/report.xml

code_quality:
  stage: build
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
      changes:
        paths:
          - "*.py"
  script:
    - ruff check -e --output-format gitlab . > gl-code-quality-report.json
  artifacts:
    name: "${CI_PROJECT_NAME}_code_quality"
    when: always
    reports:
      codequality: gl-code-quality-report.json

code_style:
  stage: build
  rules:
    - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
      changes:
        paths:
          - "*.py"
  script:
    - black --check .
    - ruff .
